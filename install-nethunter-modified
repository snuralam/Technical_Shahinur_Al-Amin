#!/data/data/com.termux/files/usr/bin/bash -e

VERSION=2020011601
BASE_URL=https://kali.download/nethunter-images/current/rootfs
VOICE_URL=https://github.com/snuralam/Technical_Shahinur_Al-Amin/raw/main/kali_voice.tar.xz
USERNAME=kali

if [ -f "/usr/bin/getprop" ]; then getprop="1"; fi
if [ ! -z "$getprop" ]; then archcase=$(getprop ro.product.cpu.abi); fi
if [ -z "$archcase" ]; then archcase=$(uname -m); fi

function unsupported_arch() {
    printf "${red}"
    echo "[*] Unsupported Architecture\n\n"
    printf "${reset}"
    exit
}

function ask() {
    # http://djm.me/ask
    while true; do

        if [ "${2:-}" = "Y" ]; then
            prompt="Y/n"
            default=Y
        elif [ "${2:-}" = "N" ]; then
            prompt="y/N"
            default=N
        else
            prompt="y/n"
            default=
        fi

        # Ask the question
        printf "${light_cyan}\n[?] "
        read -p "$1 [$prompt] " REPLY

        # Default?
        if [ -z "$REPLY" ]; then
            REPLY=$default
        fi

        printf "${reset}"

        # Check if the reply is valid
        case "$REPLY" in
            Y*|y*) return 0 ;;
            N*|n*) return 1 ;;
        esac
    done
}

function get_arch() {
    printf "${blue}[*] Checking device architecture ..."
    case $archcase in
        arm64-v8a|arm64-v8|aarch64|arm64)
            SYS_ARCH=arm64
            ;;
        armeabi|armv8l|armeabi-v7a|armv7l)
            SYS_ARCH=armhf
            ;;
        *)
            unsupported_arch
            ;;
    esac
}

function set_strings() {
    CHROOT=kali-${SYS_ARCH}
    IMAGE_NAME=kalifs-${SYS_ARCH}-full.tar.xz
    SHA_NAME=kalifs-${SYS_ARCH}-full.sha512sum
    VOICE=$PREFIX/bin/kali_voice
    VOICE_NAME=$PREFIX/bin/kali_voice.tar.xz
}

function prepare_fs() {
    unset KEEP_CHROOT
    if [ -d ${CHROOT} ]; then
        if ask "Existing rootfs directory found. Delete and create a new one?" "N"; then
            rm -rf ${CHROOT}
        else
            KEEP_CHROOT=1
        fi
    fi
}

function prepare_voice() {
    unset KEEP_VOICE
    if [ -d ${VOICE} ]; then
        if ask "Existing voice directory found. Delete and create a new one?" "N"; then
            rm -rf ${VOICE}
        else
            KEEP_VOICE=1
        fi
    fi
 }

function cleanup() {
    if [ -f ${IMAGE_NAME} ]; then
        if ask "Delete downloaded rootfs file?" "N"; then
	    if [ -f ${IMAGE_NAME} ]; then
                rm -f ${IMAGE_NAME}
	    fi
	    if [ -f ${SHA_NAME} ]; then
                rm -f ${SHA_NAME}
	    fi
        fi
    fi
}

function cleanup_voice() {
    if [ -f ${VOICE_NAME} ]; then
        if ask "Delete downloaded voice file?" "N"; then
            if [ -f ${VOICE_NAME} ]; then
                rm -f ${VOICE_NAME}
            fi
        fi
    fi
}

function check_dependencies() {
    printf "${blue}\n[*] Checking package dependencies...${reset}\n"
    ## Workaround for termux-app issue #1283 (https://github.com/termux/termux-app/issues/1283)
    ##apt update -y &> /dev/null
    termux-setup-storage && apt-get update -y &> /dev/null || apt-get -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confnew" dist-upgrade -y &> /dev/null

    for i in proot tar axel; do
        if [ -e $PREFIX/bin/$i ]; then
            echo "  $i is OK"
        else
            printf "Installing ${i}...\n"
            apt install -y $i || {
                printf "${red}ERROR: Failed to install packages.\n Exiting.\n${reset}"
	        exit
            }
        fi
    done
    apt upgrade -y && apt update && apt install wget -y && apt install play-audio -y && apt install pulseaudio -y &&
    rm -rf /sdcard/Kali_Setup && mkdir /sdcard/Kali_Setup
}

function pulse_sound() {
    SOUND_START=${PREFIX}/bin/sound
    cat > $SOUND_START <<- EOF
pulseaudio --start --load="module-native-protocol-tcp auth-ip-acl=127.0.0.1 auth-anonymous=1" --exit-idle-time=-1
EOF
    chmod 700 $PREFIX/bin/sound
}

function sound_default() {
    DEFAULT_PA=$PREFIX/etc/pulse/default.pa
    cat > $DEFAULT_PA <<- EOF
#!/data/data/com.termux/files/usr/bin/pulseaudio -nF
#
# This file is part of PulseAudio.
#
# PulseAudio is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# PulseAudio is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with PulseAudio; if not, see <http://www.gnu.org/licenses/>.

# This startup script is used only if PulseAudio is started per-user
# (i.e. not in system mode)

.fail

### Automatically restore the volume of streams and devices
load-module module-device-restore
load-module module-stream-restore
load-module module-card-restore

### Automatically augment property information from .desktop files
### stored in /usr/share/application
load-module module-augment-properties

### Should be after module-*-restore but before module-*-detect
load-module module-switch-on-port-available

### Load audio drivers statically
### (it's probably better to not load these drivers manually, but instead
### use module-udev-detect -- see below -- for doing this automatically)
#load-module module-null-sink
#load-module module-pipe-sink

### Automatically load driver modules depending on the hardware available
.ifexists module-detect.so
### Use the static hardware detection module (for systems that lack udev support)
#load-module module-detect
.endif

### Automatically connect sink and source if JACK server is present
.ifexists module-jackdbus-detect.so
.nofail
load-module module-jackdbus-detect channels=2
.fail
.endif


### Load several protocols
.ifexists module-esound-protocol-unix.so
load-module module-esound-protocol-unix
.endif
load-module module-native-protocol-unix

### Network access (may be configured with paprefs, so leave this commented
### here if you plan to use paprefs)
#load-module module-esound-protocol-tcp
load-module module-native-protocol-tcp auth-ip-acl=127.0.0.1 auth-anonymous=1

### Load the RTP receiver module (also configured via paprefs, see above)
#load-module module-rtp-recv

### Load the RTP sender module (also configured via paprefs, see above)
#load-module module-null-sink sink_name=rtp format=s16be channels=2 rate=44100 sink_properties="device.description='RTP Multicast Sink'"
#load-module module-rtp-send source=rtp.monitor


### Automatically restore the default sink/source when changed by the user
### during runtime
### NOTE: This should be loaded as early as possible so that subsequent modules
### that look up the default sink/source get the right value
load-module module-default-device-restore

### Make sure we always have a sink around, even if it is a null sink.
load-module module-always-sink

### Honour intended role device property
load-module module-intended-roles

### Automatically suspend sinks/sources that become idle for too long
load-module module-suspend-on-idle

### If autoexit on idle is enabled we want to make sure we only quit
### when no local session needs us anymore.
.ifexists module-console-kit.so
load-module module-console-kit
.endif
.ifexists module-systemd-login.so
load-module module-systemd-login
.endif

### Enable positioned event sounds
load-module module-position-event-sounds

### Cork music/video streams when a phone stream is active
load-module module-role-cork

### Modules to allow autoloading of filters (such as echo cancellation)
### on demand. module-filter-heuristics tries to determine what filters
### make sense, and module-filter-apply does the heavy-lifting of
### loading modules and rerouting streams.
load-module module-filter-heuristics
load-module module-filter-apply

### Make some devices default
#set-default-sink output
#set-default-source input

### Allow including a default.pa.d directory, which if present, can be used
### for additional configuration snippets.
### Note that those snippet files must have a .pa file extension, not .conf
.nofail
.include /data/data/com.termux/files/usr/etc/pulse/default.pa.d
load-module module-sles-sink
#load-module module-aaudio-sink
EOF
}

function sound_daemon() {
    DAEMON_CONF=$PREFIX/etc/pulse/daemon.conf
    cat > $DAEMON_CONF <<- EOF
# This file is part of PulseAudio.
#
# PulseAudio is free software; you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# PulseAudio is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with PulseAudio; if not, see <http://www.gnu.org/licenses/>.

## Configuration file for the PulseAudio daemon. See pulse-daemon.conf(5) for
## more information. Default values are commented out.  Use either ; or # for
## commenting.

; daemonize = no
; fail = yes
; allow-module-loading = yes
; allow-exit = yes
; use-pid-file = yes
; system-instance = no
; enable-shm = yes
; enable-memfd = yes
; shm-size-bytes = 0 # setting this 0 will use the system-default, usually 64 MiB
; lock-memory = no
; cpu-limit = no

; high-priority = yes
; nice-level = -11

; realtime-scheduling = yes
; realtime-priority = 5

; exit-idle-time = -1
; scache-idle-time = 20

; dl-search-path = (depends on architecture)

; load-default-script-file = yes
; default-script-file = /data/data/com.termux/files/usr/etc/pulse/default.pa

; log-target = auto
; log-level = notice
; log-meta = no
; log-time = no
; log-backtrace = 0

; resample-method = speex-float-1
; avoid-resampling = false
; enable-remixing = yes
; remixing-use-all-sink-channels = yes
; remixing-produce-lfe = no
; remixing-consume-lfe = no
; lfe-crossover-freq = 0

; flat-volumes = no

; rescue-streams = yes

; rlimit-fsize = -1
; rlimit-data = -1
; rlimit-stack = -1
; rlimit-core = -1
; rlimit-as = -1
; rlimit-rss = -1
; rlimit-nproc = -1
; rlimit-nofile = 256
; rlimit-memlock = -1
; rlimit-locks = -1
; rlimit-sigpending = -1
; rlimit-msgqueue = -1
; rlimit-nice = 31
; rlimit-rtprio = 9
; rlimit-rttime = 200000

; default-sample-format = s16le
; default-sample-rate = 44100
; alternate-sample-rate = 48000
; default-sample-channels = 2
; default-channel-map = front-left,front-right

; default-fragments = 4
; default-fragment-size-msec = 25

; enable-deferred-volume = yes
; deferred-volume-safety-margin-usec = 8000
; deferred-volume-extra-delay-usec = 0
EOF
}

function get_url() {
    ROOTFS_URL="${BASE_URL}/${IMAGE_NAME}"
    SHA_URL="${BASE_URL}/${SHA_NAME}"
}

function get_rootfs() {
    unset KEEP_IMAGE
    if [ -f ${IMAGE_NAME} ]; then
        if ask "Existing image file found. Delete and download a new one?" "N"; then
            rm -f ${IMAGE_NAME}
        else
            printf "${yellow}[!] Using existing rootfs archive${reset}\n"
            KEEP_IMAGE=1
            return
        fi
    fi
    printf "${blue}[*] Downloading rootfs...${reset}\n\n"
    get_url
    axel ${EXTRA_ARGS} --alternate "$ROOTFS_URL"
}

function get_voice() {
    if [ -f ${VOICE_NAME} ]; then
        if ask "Existing voice file found. Delete and download a new one?" "N"; then
            rm -f ${VOICE_NAME}
        else
            printf "${yellow}[!] Using existing voice archive${reset}\n"
            return
        fi
    fi
    printf "${blue}[*] Downloading voice...${reset}\n\n"
    cd $PREFIX/bin &&  axel ${EXTRA_ARGS} --alternate "$VOICE_URL"
}

function get_sha() {
    if [ -z $KEEP_IMAGE ]; then
        printf "\n${blue}[*] Getting SHA ... ${reset}\n\n"
        get_url
        if [ -f ${SHA_NAME} ]; then
            rm -f ${SHA_NAME}
        fi
        axel ${EXTRA_ARGS} --alternate "${SHA_URL}"
    fi
}

function verify_sha() {
    if [ -z $KEEP_IMAGE ]; then
        printf "\n${blue}[*] Verifying integrity of rootfs...${reset}\n\n"
        sha512sum -c $SHA_NAME || {
            printf "${red} Rootfs corrupted. Please run this installer again or download the file manually\n${reset}"
            exit 1
        }
    fi
}

function extract_rootfs() {
    if [ -z $KEEP_CHROOT ]; then
        printf "\n${blue}[*] Extracting rootfs... ${reset}\n\n"
        proot --link2symlink tar -xf $IMAGE_NAME 2> /dev/null || :
    else
        printf "${yellow}[!] Using existing rootfs directory${reset}\n"
    fi
}

function extract_voice() {
cd $PREFIX/bin
    if [ -z $KEEP_VOICE ]; then
        printf "\n${blue}[*] Extracting voice... ${reset}\n\n"
        proot --link2symlink tar -xf $VOICE_NAME 2> /dev/null || :
    else
        printf "${yellow}[!] Using existing voice directory${reset}\n"
    fi
}

function create_launcher() {
    NH_LAUNCHER=${PREFIX}/bin/nethunter
    NH_SHORTCUT=${PREFIX}/bin/nh
    cat > $NH_LAUNCHER <<- EOF
sound && play-audio $PREFIX/bin/kali_voice/NetHunter.wav &&
#!/data/data/com.termux/files/usr/bin/bash -e
cd \${HOME}
## termux-exec sets LD_PRELOAD so let's unset it before continuing
unset LD_PRELOAD
## Workaround for Libreoffice, also needs to bind a fake /proc/version
if [ ! -f $CHROOT/root/.version ]; then
    touch $CHROOT/root/.version
fi

## Default user is "kali"
user="$USERNAME"
home="/home/\$user"
start="sudo -u kali /bin/bash"

## NH can be launched as root with the "-r" cmd attribute
## Also check if user kali exists, if not start as root
if grep -q "kali" ${CHROOT}/etc/passwd; then
    KALIUSR="1";
else
    KALIUSR="0";
fi
if [[ \$KALIUSR == "0" || ("\$#" != "0" && ("\$1" == "-r" || "\$1" == "-R")) ]];then
    user="root"
    home="/\$user"
    start="/bin/bash --login"
    if [[ "\$#" != "0" && ("\$1" == "-r" || "\$1" == "-R") ]];then
        shift
    fi
fi

cmdline="proot \\
        --link2symlink \\
        -0 \\
        -r $CHROOT \\
        -b /dev \\
        -b /proc \\
        -b /sdcard \\
        -b $CHROOT\$home:/dev/shm \\
        -w \$home \\
           /usr/bin/env -i \\
           HOME=\$home \\
           PATH=/usr/local/sbin:/usr/local/bin:/bin:/usr/bin:/sbin:/usr/sbin \\
           TERM=\$TERM \\
           LANG=C.UTF-8 \\
           \$start"

cmd="\$@"
if [ "\$#" == "0" ];then
    exec \$cmdline
else
    \$cmdline -c "\$cmd"
fi
EOF

    chmod 700 $NH_LAUNCHER
    if [ -L ${NH_SHORTCUT} ]; then
        rm -f ${NH_SHORTCUT}
    fi
    if [ ! -f ${NH_SHORTCUT} ]; then
        ln -s ${NH_LAUNCHER} ${NH_SHORTCUT} >/dev/null
    fi
}

function welcome_voice() {
    printf "${green}##    Welcome To Kali    ##\n"
    play-audio $PREFIX/bin/kali_voice/Welcome_to_Kali.wav &&
    printf "${light_cyan}##******************************************##\n"
    printf "${light_cyan}## []\ [] []  []   [][\ /][]        [][]\   ##\n"
    printf "${light_cyan}## []\√[] []##[]‌   [] \√/ []        []  []  ##\n"
    printf "${light_cyan}## [] \[] []  []   []     [] ODIFIE [][]/   ##\n"
    printf "${light_cyan}##★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★##${reset}\n\n"
    play-audio $PREFIX/bin/kali_voice/installing_voice.wav
}

function create_kex_launcher() {
    KEX_LAUNCHER=${CHROOT}/usr/bin/kex
    cat > $KEX_LAUNCHER <<- EOF
#!/bin/bash

function gnu() {
   case $archcase in
        arm64-v8a|arm64-v8|aarch64|arm64)
            SHAHINUR=/usr/lib/aarch64-linux-gnu/libgcc_s.so.1
            ;;
        armeabi|armeabi-v7a|armv7l|armv8l)
            SHAHINUR=/usr/lib/arm-linux-gnueabihf/libgcc_s.so.1
            ;;
   esac
}

function start-kex() {
    if [ ! -f ~/.vnc/passwd ]; then
        passwd-kex
    fi
    USR=\$(whoami)
    if [ \$USR == "root" ]; then
        SCREEN=":2"
    else
        SCREEN=":1"
    fi
    export HOME=\${HOME}; export USER=\${USR}; export PULSE_SERVER=127.0.0.1 ; LD_PRELOAD=${SHAHINUR} nohup vncserver \$SCREEN >/dev/null 2>&1 </dev/null
    starting_kex=1
    return 0
}

function stop-kex() {
    vncserver -kill :1 | sed s/"Xtigervnc"/"NetHunter KeX"/
    vncserver -kill :2 | sed s/"Xtigervnc"/"NetHunter KeX"/
    return $?
}

function passwd-kex() {
    vncpasswd
    return $?
}

function status-kex() {
    sessions=\$(vncserver -list | sed s/"TigerVNC"/"NetHunter KeX"/)
    if [[ \$sessions == *"590"* ]]; then
        printf "\n\${sessions}\n"
        printf "\nYou can use the KeX client to connect to any of these displays.\n\n"
    else
        if [ ! -z \$starting_kex ]; then
            printf '\nError starting the KeX server.\nPlease try "nethunter kex kill" or restart your termux session and try again.\n\n'
        fi
    fi
    return 0
}

function kill-kex() {
    pkill Xtigervnc
    return \$?
}

case \$1 in
    start)
        start-kex
        ;;
    stop)
        stop-kex
        ;;
    status)
        status-kex
        ;;
    passwd)
        passwd-kex
        ;;
    kill)
        kill-kex
        ;;
    *)
        stop-kex
        start-kex
        status-kex
        ;;
esac
EOF

    chmod 700 $KEX_LAUNCHER
}

function time_zone() {
    TIME_ZONE=${CHROOT}/usr/bin/tz
    cat > $TIME_ZONE <<- EOF
#!/bin/bash
sudo dpkg-reconfigure tzdata
EOF

    chmod 700 $TIME_ZONE
}

function fix_profile_bash() {
    cd $HOME &&
    ## Prevent attempt to create links in read only filesystem
    if [ -f ${CHROOT}/root/.bash_profile ]; then
        sed -i '/if/,/fi/d' "${CHROOT}/root/.bash_profile"
    fi
}

function fix_sudo() {
    ## fix sudo & su on start
    chmod +s $CHROOT/usr/bin/sudo
    chmod +s $CHROOT/usr/bin/su
	echo "kali    ALL=(ALL:ALL) ALL" > $CHROOT/etc/sudoers.d/kali

    # https://bugzilla.redhat.com/show_bug.cgi?id=1773148
    echo "Set disable_coredump false" > $CHROOT/etc/sudo.conf
}

function fix_uid() {
    ## Change kali uid and gid to match that of the termux user
    USRID=$(id -u)
    GRPID=$(id -g)
    nh -r usermod -u $USRID kali 2>/dev/null
    nh -r groupmod -g $GRPID kali 2>/dev/null
}

function network_setup() {
    NETWORK_LAUNCHER=/sdcard/Kali_Setup/Firefox_Network_Setup.txt
    cat > $NETWORK_LAUNCHER <<- EOF
Technical Shahinur_Al-Amin
Network Setup Video =
https://youtu.be/tSI9PzjsjCI

Command for none rooted:

about:config

media.cubeb.sandbox (true)

security.sandbox.content.level (0)

Command for rooted:

about:config

media.cubeb.sandbox (false)

security.sandbox.content.level (0)
EOF

}

function fonts_setup() {
    FONTS=/sdcard/Kali_Setup/Fonts_Setup.txt
    cat > $FONTS <<- EOF
Technical Shahinur_Al-Amin

Fonts Setup Video:

https://youtu.be/vB3wlb3tMoU

Thanks
EOF
}

function tz_command() {
    TZ=/sdcard/Kali_Setup/Time_Zone_Comman.txt
    cat > $TZ <<- EOF
Technical Shahinur_Al-Amin

Command on Terminal :
Type:

tz

and command : sudo password :

sudo password is kali

Thanks
EOF
}

function play_audio() {
    play-audio $PREFIX/bin/kali_voice/Kali_NetHunter_for_Termux_installed_successfully.wav && play-audio $PREFIX/bin/kali_voice/Modified_By_Tecnical_Shahinur_Al_Amin.wav
}

function alhamdulillah() {
    printf "${green}##               Alhamdulillah                 ##\n"
    printf "${blue}**************************************************\n"
    printf "${green}#################################################\n"
    printf "${green}########################${red}#${green}########################\n"
    printf "${green}######################${red}#####${green}######################\n"
    printf "${green}####################${red}#########${green}####################\n"
    printf "${green}##################${red}#${yellow}Bangladesh${red}##${green}##################\n"
    printf "${green}####################${red}#########${green}####################\n"
    printf "${green}######################${red}#####${green}######################\n"
    printf "${green}########################${red}#${green}########################\n"
    printf "${green}#################################################${reset}\n\n"
    play-audio $PREFIX/bin/kali_voice/alhamdulillah.mp3
}

function print_banner() {
    clear
    printf "${yellow}##################################################\n"
    printf "${yellow}##         ${light_cyan}Technical Shahinur_Al-Amin${yellow}           ##\n"
    printf "${yellow}##  ${red}88      a8P         db        88        88${yellow}  ##\n"
    printf "${yellow}##  ${red}88    .88'         d88b       88        88${yellow}  ##\n"
    printf "${yellow}##  ${red}88   88'          d8''8b      88        88${yellow}  ##\n"
    printf "${yellow}##  ${red}88 d88           d8'  '8b     88        88${yellow}  ##\n"
    printf "${yellow}##  ${red}8888'88.        d8YaaaaY8b    88        88${yellow}  ##\n"
    printf "${yellow}##  ${red}88P   Y8b      d8''''''''8b   88        88${yellow}  ##\n"
    printf "${yellow}##  ${red}88     '88.   d8'        '8b  88        88${yellow}  ##\n"
    printf "${yellow}##  ${red}88       Y8b d8'          '8b 888888888 88${yellow}  ##\n"
    printf "${yellow}##               ${blue}Moded By Shahinur${yellow}              ##\n"
    printf "${yellow}####  ############## ${green}NetHunter${yellow} #############  ####${reset}\n\n"
}


##################################
##              Main            ##

# Add some colours
red='\033[1;31m'
green='\033[1;32m'
yellow='\033[1;33m'
blue='\033[1;34m'
light_cyan='\033[1;96m'
reset='\033[0m'

EXTRA_ARGS=""
if [[ ! -z $1 ]]; then
    EXTRA_ARGS=$1
    if [[ $EXTRA_ARGS != "--insecure" ]]; then
        EXTRA_ARGS=""
    fi
fi

cd $HOME
print_banner
get_arch
set_strings
prepare_fs
prepare_voice
check_dependencies
pulse_sound
sound_default
sound_daemon
get_rootfs
get_sha
verify_sha
extract_rootfs
create_launcher
cleanup
get_voice
extract_voice
cleanup_voice
welcome_voice
printf "\n${blue}[*] Configuring NetHunter for Termux ...\n"
fix_profile_bash
fix_sudo
create_kex_launcher
time_zone
tz_command
fix_uid
network_setup
fonts_setup
alhamdulillah

print_banner
printf "${green}[=] Kali NetHunter for Termux installed successfully${reset}\n\n"
printf "${green}[+] To start Kali NetHunter, type:${reset}\n"
printf "${green}[+] nethunter             # To start NetHunter CLI${reset}\n"
printf "${green}[+] nethunter kex passwd  # To set the KeX password${reset}\n"
printf "${green}[+] nethunter kex &       # To start NetHunter GUI${reset}\n"
printf "${green}[+] nethunter kex stop    # To stop NetHunter GUI${reset}\n"
#printf "${green}[+] nethunter kex <command> # Run command in NetHunter env${reset}\n"
printf "${green}[+] nethunter -r          # To run NetHunter as root${reset}\n"
#printf "${green}[+] nethunter -r kex passwd  # To set the KeX password for root${reset}\n"
#printf "${green}[+] nethunter kex &       # To start NetHunter GUI as root${reset}\n"
#printf "${green}[+] nethunter kex stop    # To stop NetHunter GUI root session${reset}\n"
#printf "${green}[+] nethunter -r kex kill # To stop all NetHunter GUI sessions${reset}\n"
#printf "${green}[+] nethunter -r kex <command> # Run command in NetHunter env as root${reset}\n"
printf "${green}[+] nh                    # Shortcut for nethunter${reset}\n"
printf "${green}[+] nh tz  #Time.Zone.Setup> 1st type nh then tz${reset}\n\n"
play_audio
